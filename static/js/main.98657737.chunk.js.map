{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","serviceWorker.js","index.js","App.js"],"names":["Card","value","className","src","id","alt","name","email","Cardlist","monster","map","val","index","key","Searchbox","search","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","useState","state","setState","setSearch","useEffect","fetch","then","res","json","users","filtered","filter","toLowerCase","includes","e","target","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iTAGcA,G,YAAO,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACnB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,0BAA4DC,IAAI,KAC5E,4BAAKJ,EAAMK,MACX,4BAAKL,EAAMM,UCJNC,EAAW,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACtB,OAGI,yBAAKP,UAAU,YACVO,EAAQC,KAAI,SAACC,EAAKC,GAAN,OAET,kBAAC,EAAD,CAAMC,IAAKD,EAAOX,MAASU,SCR9BG,G,MAAY,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACvB,OAEI,2BAAOb,UAAU,SAASc,KAAK,SAASC,YAAY,iBAAiBC,SAAUH,M,MCMnEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBC4MD,WAAgB,IAAD,EAENC,mBAAS,IAFH,mBAExBC,EAFwB,KAEjBC,EAFiB,OAGJF,mBAAS,IAHL,mBAGxBX,EAHwB,KAGhBc,EAHgB,KAK9BC,qBAAU,WACWC,MAAM,8CACxBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAIP,EAASO,QAGxB,IAEA,IAKIC,EAHQ,YAAOT,GAGKU,QAAO,SAAA1B,GAAG,OAAIA,EAAIL,KAAKgC,cAAcC,SAASxB,MAGtE,OACE,6BACE,+CACA,kBAAC,EAAD,CAAWA,OAXM,SAACyB,GAAD,OAAOX,EAAUW,EAAEC,OAAOxC,UAY3C,kBAAC,EAAD,CAAUQ,QAAS2B,ODrOT,MAASM,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.98657737.chunk.js","sourcesContent":["import React from 'react'\nimport './card.component.css'\n\nexport  const Card = ({value}) => {\n    return (\n        <div className='card-container'>\n            <img src={`https://robohash.org/${value.id}?set=set2&size=180x180`} alt=\"\"/>\n        <h1>{value.name}</h1>\n        <h2>{value.email}</h2>\n        </div>\n    )\n}\n","import React from 'react'\nimport './card-list.styles.css'\nimport {Card} from '../card/card.component'\n\nexport const Cardlist = ({monster}) => {\n    return (\n \n        \n        <div className='cardlist'>\n            {monster.map((val, index) =>\n             \n                <Card key={index} value = {val}></Card>\n            )}\n        </div>\n    )\n}\n","import React from 'react'\nimport './search-box.styles.css'\n\nexport const Searchbox = ({search}) => {\n    return (\n       \n        <input className='search' type=\"search\" placeholder=\"search monster\" onChange={search} />\n      \n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// import React, {useState} from 'react';\n// import './App.css';\n\n// // ####################################################################################\n// function Todo({ index, todo}) {\n//   return (\n//   <div className=\"todo\">\n// {todo.text} \n//   </div>\n//   )\n\n// }\n\n// // #####################################################################################\n\n// // #####################################################################################3\n\n\n// function TodoForm({addTodo}) {\n//   const [value, setValue] = useState('');\n\n//   const handleSumbit = e => { \n//     e.preventDefault();\n//     if(!value) return;\n//     addTodo(value);\n//     setValue(\"\");\n\n\n//   }\n\n//   return(\n//     <form onSubmit={handleSumbit}>\n//       <input type=\"text\" className=\"input\" value={value} onChange={e => setValue(e.target.value)}></input>\n//     </form>\n//   )\n\n// }\n\n// // ################################################################################################################\n\n// function App() {\n\n//   const [todos, setTodos] = useState([\n//     {\n//       text: 'Learn about React',\n//       isCompleted: false\n//   },\n//     {\n//       text: 'Study react Hooks',\n//       isCompleted: false\n//     },\n//     {\n//       text: 'Download Udemy courses',\n//       isCompleted: false\n//     }\n// ]);\n\n\n// const addTodo = text => {\n//   const newTodo = [...todos, { text }];\n//   setTodos(newTodo)\n// }\n\n// return (\n// // ############ APP TEMPLATE ############\n\n//   <div className=\"app\">\n//     <div className=\"todo-list\">\n//  {todos.map((todo, index)=>(\n// <Todo key={index}  index={index} todo = {todo} />\n//  ))}\n\n//  <TodoForm addTodo={addTodo}  />\n//     </div>\n//   </div>\n// )\n\n// }\n\n// export default App;\n\n\n\n// ######################################################################\n\n\n//  import React, {useState} from 'react';\n//  import './App.css';\n\n// const App = () => {\n// const [state, setState] = useState(\"\")\n\n//   const update = (e) => {\n\n//     const newTodo = [state, e.target.value];\n//     setState(newTodo)\n//    console.log(state)\n//   }\n\n\n\n//   const [main, setMain] = useState([])\n\n  \n// const submit = (e)=>{\n// e.preventDefault();\n\n//   setMain(state)\n \n//   setState(\"\")\n\n// }\n\n//  // console.log(main)\n \n//   let array = [...state]\n\n\n\n\n\n\n\n//  // console.log(state)\n\n//   return (\n//    <div>\n//   <form >\n//         <input type=\"text\" onChange={update} />\n//       <button onClick = {submit}>Submit</button>\n// <div>{array.map((val,index) => \n//   (<li key={index}> {val}</li>\n//       ))}</div>\n\n//       </form>\n//       {/* <li>{array}</li> */}\n//    </div>\n//   )\n\n// }\n\n\n//export default App;\n\n\n// import React, { useState, useEffect } from 'react'\n\n\n// //const divStyle = {\n\n// //}\n\n// export default function App() {\n\n// const [todo, setTodo] = useState(null)\n// const [search, setSearch] = useState('')\n\n// useEffect(()=>{\n//   if (search.length > 0)\n// console.log(\"hello\")\n//   const list = async ()=>{\n//     const response = await fetch(`https://jsonplaceholder.typicode.com/users?id=${search}`)\n//     const resJson = await response.json()\n// setTodo(resJson[0])\n \n//   }\n\n//   // const list = () => {\n//   //   fetch(`https://jsonplaceholder.typicode.com/users?id=${search}`)\n//   //     .then(res => res.json())\n//   //     .then(resJson => setTodo(resJson[0]))\n\n//   // }\n\n//   list();\n\n// },[search])\n\n\n\n//  // console.log(todo)\n//   return (\n//     <div className=\"container\">\n// <input type=\"search\"\n// onChange = {e =>{ setSearch(e.target.value)} }\n// />\n\n// {todo ? (\n  \n//   <div>\n//           <h5> {todo.id}</h5>\n//         <h5> {todo.name} </h5>\n//           <h5> {todo.email}</h5>\n//           <h5> {todo.address.street}</h5>\n//           <h5> {todo.address.city}</h5>\n        \n//           </div>\n// ): null} \n\n//     </div>\n//   )\n// }\n\n\n\nimport React, {useState, useEffect} from 'react'\nimport {Cardlist} from './components/card-list/card-list.component'\nimport {Searchbox} from './components/search-box/search-box.component'\nimport './App.css';\n\nexport default function App() {\n\nconst[state, setState]= useState([])\nconst[search, setSearch]= useState(\"\")\n\nuseEffect(()=>{\n  const list = ()=>{ fetch(`https://jsonplaceholder.typicode.com/users`)\n  .then(res => res.json())\n  .then(users => setState(users))\n  }\n  list()\n},[])\n\n  const searchMoster = (e) => setSearch(e.target.value)\n\nconst newState = [...state]\n\n\nconst filtered = newState.filter(val => val.name.toLowerCase().includes(search))\n\n\n  return (\n    <div>\n      <h1>Monster Rolodex</h1>\n      <Searchbox search = {searchMoster} ></Searchbox>\n      <Cardlist monster={filtered}>\n\n      </Cardlist>\n     \n      \n    </div>\n  )\n}\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}